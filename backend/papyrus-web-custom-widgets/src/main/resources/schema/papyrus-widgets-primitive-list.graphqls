extend type FormDescription {
  primitiveListCandidates(primitiveListId: ID!): [PrimitiveListCandidate!]!
}

type PrimitiveListWidget implements Widget {
  id: ID!
  label: String!
  iconURL: [String!]!
  diagnostics: [Diagnostic!]!
  hasHelpText: Boolean!
  readOnly: Boolean!
  items: [PrimitiveListItem!]!
  style: ListStyle
  canAdd : Boolean!
  canReorder: Boolean!
  hasCandidates: Boolean!
}

type PrimitiveListCandidate {
  value: String!
  label: String!
}

extend type Mutation {
  deletePrimitiveListItem(input: DeleteListItemInput!): DeleteListItemPayload!
  addPrimitiveListItem(input: AddPrimitiveListItemInput!): AddPrimitiveListItemPayload!
  reorderPrimitiveListItems(input: ReorderPrimitiveListItemsInput!): ReorderPrimitiveListItemsPayload!
  actionPrimitiveListItem(input: ActionListItemInput!): ActionListItemPayload!
}

input AddPrimitiveListItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  listId: ID!
  newValue: String!
}

union AddPrimitiveListItemPayload = ErrorPayload | SuccessPayload

type PrimitiveListItem {
  id: ID!
  label: String!
  kind: String!
  iconURL: [String!]!
  deletable: Boolean!
  hasAction: Boolean!
  actionIconURL: String
}

input ReorderPrimitiveListItemsInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  listId: ID!
  itemId: ID!
  fromIndex: Int!
  toIndex: Int!
}

union ReorderPrimitiveListItemsPayload = ErrorPayload | SuccessPayload

input ActionListItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  listId: ID!
  itemId: ID!
}

union ActionListItemPayload = ErrorPayload | SuccessPayload
